package com.wedstra.app.wedstra.backend.Services;

import com.wedstra.app.wedstra.backend.Entity.Blog;
import com.wedstra.app.wedstra.backend.Repo.BlogRepository;
import com.wedstra.app.wedstra.backend.config.AmazonS3Config.bucket.fileStore.FileStore;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.PDPage;
import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
import org.apache.pdfbox.text.PDFTextStripper;
import org.apache.poi.xwpf.extractor.XWPFWordExtractor;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFPictureData;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.util.*;

@Service
public class BlogService {

    @Autowired
    private BlogRepository blogRepository;

    @Autowired
    private FileStore fileStore;

    public Blog createBlog(String title, String content, String authorId, String authorType, List<MultipartFile> images) throws IOException {
        List<String> imageUrls = new ArrayList<>();

        for (MultipartFile file : images) {
            String key = "blogs/" + authorId + "/" + UUID.randomUUID() + "-" + file.getOriginalFilename();
            String url = fileStore.saveBlogs(file.getOriginalFilename(), Optional.empty(), file.getInputStream(), key);
            imageUrls.add(url);
        }

        Blog blog = new Blog(title, content, authorId, authorType, imageUrls);
        return blogRepository.save(blog); // ID is automatically generated by MongoDB
    }

    public List<Blog> getAllBlogs() {
        return blogRepository.findAll();
    }

    public Optional<Blog> getBlogById(String id) {
        return blogRepository.findById(id);
    }

    public void deleteBlog(String id) {
        blogRepository.deleteById(id);
    }

    public Blog createBlogWithFileAndImages(MultipartFile contentFile,
                                            String title,
                                            String authorId,
                                            String authorType,
                                            List<MultipartFile> images) throws IOException {

        // 1️⃣ Extract text from content file
        String content = "";
        String fileName = contentFile.getOriginalFilename();
        if (fileName == null) throw new IOException("File name is missing.");

        if (fileName.endsWith(".docx")) {
            try (XWPFDocument doc = new XWPFDocument(contentFile.getInputStream())) {
                XWPFWordExtractor extractor = new XWPFWordExtractor(doc);
                content = extractor.getText();
            }
        } else if (fileName.endsWith(".pdf")) {
            try (PDDocument document = PDDocument.load(contentFile.getInputStream())) {
                PDFTextStripper stripper = new PDFTextStripper();
                content = stripper.getText(document);

            }
        } else {
            throw new IOException("Unsupported file type. Only .docx and .pdf are supported.");
        }

        // Format text for HTML display
        content = content.replaceAll("\\r\\n|\\r|\\n", " ").trim();

        // 2️⃣ Upload additional images to S3
        List<String> imageUrls = new ArrayList<>();
        if (images != null) {
            for (MultipartFile image : images) {
                String key = "blogs/" + authorId + "/" + UUID.randomUUID() + "-" + image.getOriginalFilename();
                String url = fileStore.saveBlogs(image.getOriginalFilename(), Optional.empty(), image.getInputStream(), key);
                imageUrls.add(url);
            }
        }

        // 3️⃣ Save blog to MongoDB
        Blog blog = new Blog();
        blog.setTitle(title);
        blog.setContent(content);
        blog.setAuthorId(authorId);
        blog.setAuthorType(authorType);
        blog.setCreatedAt(LocalDateTime.now());
        blog.setImageUrls(imageUrls);

        return blogRepository.save(blog);
    }


    private String generateKey(MultipartFile file, String blogId, String type) {
        String originalFilename = file.getOriginalFilename();
        String extension = "";

        if (originalFilename != null && originalFilename.contains(".")) {
            extension = originalFilename.substring(originalFilename.lastIndexOf('.') + 1);
        }

        return String.format("blogs/%s/%s-%s.%s", blogId, type, UUID.randomUUID(), extension);
    }



}
